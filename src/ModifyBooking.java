
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author dhruvil
 */
public class ModifyBooking extends javax.swing.JFrame {

    /**
     * Creates new form ModifyBooking
     */
    public String checkindate=null,checkoutdate=null,code=null;
    public int dayss=0,rr=0,ppn=0;
    public ModifyBooking() {
        initComponents();
        float[] hsb=new float[3];
        int r=14;
        int g=140;
        int b=214;
        Color.RGBtoHSB(r, g, b, hsb);
        logout.setBackground(Color.red);
        join.setBackground(Color.getHSBColor(hsb[0],hsb[1],hsb[2]));
        cancel.setBackground(Color.getHSBColor(hsb[0],hsb[1],hsb[2]));
        back.setBackground(Color.getHSBColor(hsb[0],hsb[1],hsb[2]));
        confirm.setBackground(Color.getHSBColor(hsb[0],hsb[1],hsb[2]));
        r=40;
        g=40;
        b=40;
        Color.RGBtoHSB(r, g, b, hsb);
        this.getContentPane().setBackground(Color.getHSBColor(hsb[0],hsb[1],hsb[2]));
        
        join.setVisible(false);
        cancel.setVisible(false);
        
        viewbooking x = new viewbooking();
        
        city.setText(viewbooking.locate);
        hname.setText(viewbooking.hotel);
        ccin.setText("Current check-in : "+viewbooking.checkin);
        ccout.setText("Current check-out : "+viewbooking.checkout);
        crooms.setText("Rooms required : "+x.rr);
        String yearss[]={"2018","2019","2020","2021","2022","2023","2024","2025"};
        String monthss[]={"01","02","03","04","05","06","07","08","09","10","11","12"};
        String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" };
        final DefaultComboBoxModel model = new DefaultComboBoxModel(yearss);
        final DefaultComboBoxModel model0 = new DefaultComboBoxModel(yearss);
        inyear.setModel(model);
        outyear.setModel(model0);
        final DefaultComboBoxModel model1 = new DefaultComboBoxModel(monthss);
        final DefaultComboBoxModel model10 = new DefaultComboBoxModel(monthss);
        inmonth.setModel(model1);
        outmonth.setModel(model10);
        final DefaultComboBoxModel model2 = new DefaultComboBoxModel(labels);
        final DefaultComboBoxModel model20 = new DefaultComboBoxModel(labels);
        inday.setModel(model2);
        outday.setModel(model20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back = new javax.swing.JButton();
        city = new javax.swing.JLabel();
        hname = new javax.swing.JLabel();
        ccin = new javax.swing.JLabel();
        ccout = new javax.swing.JLabel();
        crooms = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        outyear = new javax.swing.JComboBox<>();
        inmonth = new javax.swing.JComboBox<>();
        inday = new javax.swing.JComboBox<>();
        outday = new javax.swing.JComboBox<>();
        inyear = new javax.swing.JComboBox<>();
        outmonth = new javax.swing.JComboBox<>();
        confirm = new javax.swing.JButton();
        join = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        nguests = new javax.swing.JComboBox<>();
        nrooms = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        city.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        city.setForeground(new java.awt.Color(255, 255, 255));
        city.setText("City name");

        hname.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        hname.setForeground(new java.awt.Color(255, 255, 255));
        hname.setText("Hotel name");

        ccin.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        ccin.setForeground(new java.awt.Color(255, 255, 255));
        ccin.setText("Current checkin");

        ccout.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        ccout.setForeground(new java.awt.Color(255, 255, 255));
        ccout.setText("Current checkout");

        crooms.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        crooms.setForeground(new java.awt.Color(255, 255, 255));
        crooms.setText("Rooms");

        jLabel1.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Check - in :");

        jLabel2.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Check - out :");

        jLabel3.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Number of guests :");

        jLabel4.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Number of rooms :");

        outyear.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        outyear.setForeground(new java.awt.Color(255, 255, 255));
        outyear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        inmonth.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        inmonth.setForeground(new java.awt.Color(255, 255, 255));
        inmonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        inmonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inmonthItemStateChanged(evt);
            }
        });
        inmonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inmonthActionPerformed(evt);
            }
        });

        inday.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        inday.setForeground(new java.awt.Color(255, 255, 255));
        inday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        outday.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        outday.setForeground(new java.awt.Color(255, 255, 255));
        outday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        inyear.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        inyear.setForeground(new java.awt.Color(255, 255, 255));
        inyear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        outmonth.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        outmonth.setForeground(new java.awt.Color(255, 255, 255));
        outmonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        outmonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                outmonthItemStateChanged(evt);
            }
        });
        outmonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outmonthActionPerformed(evt);
            }
        });

        confirm.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        confirm.setForeground(new java.awt.Color(255, 255, 255));
        confirm.setText("Confirm");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        join.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        join.setForeground(new java.awt.Color(255, 255, 255));
        join.setText("Join Waiting list");
        join.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        cancel.setForeground(new java.awt.Color(255, 255, 255));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/1541829391162 (1).png"))); // NOI18N
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Caviar Dreams", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(22, 169, 255));
        jLabel5.setText("Modify Bookings");

        nguests.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        nguests.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40" }));

        nrooms.setFont(new java.awt.Font("Caviar Dreams", 1, 14)); // NOI18N
        nrooms.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel6.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("* Number of guests in one room should not exceed 4.");

        jLabel7.setFont(new java.awt.Font("Caviar Dreams", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("* Number of days of stay should not exceed 30.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(380, 380, 380)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logout)
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancel)
                .addGap(297, 297, 297))
            .addGroup(layout.createSequentialGroup()
                .addGap(590, 590, 590)
                .addComponent(confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inyear, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(inmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(inday, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(join)
                                    .addComponent(nguests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ccin, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(ccout, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(crooms, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(114, 114, 114))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(outyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(11, 11, 11)
                                        .addComponent(outmonth, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(outday, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(nrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(120, 120, 120))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(hname, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crooms, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ccin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ccout, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inmonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inday, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outmonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nguests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nrooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(10, 10, 10)
                .addComponent(confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(join, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        // TODO add your handling code here:
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s=con.createStatement();
            ResultSet rs=null;
            Connection con1=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s1=con1.createStatement();
            ResultSet rs1=null;
            Connection con2=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s2=con2.createStatement();
            ResultSet rs2=null,rs3=null;
            Connection con3=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s3=con3.createStatement();
            String bid=null;
            String inyy=(String)inyear.getSelectedItem();
            String inmm=(String)inmonth.getSelectedItem();
            String indd=(String)inday.getSelectedItem();
            checkindate=inyy+"-"+inmm+"-"+indd;
            String outyy=(String)outyear.getSelectedItem();
            String outmm=(String)outmonth.getSelectedItem();
            String outdd=(String)outday.getSelectedItem();
            checkoutdate=outyy+"-"+outmm+"-"+outdd;
            int gg=-1;
            
                gg=Integer.parseInt((String)nguests.getSelectedItem());
            
            rr=-1;
            
                rr=Integer.parseInt((String)nrooms.getSelectedItem());
             
            int days=0,temp=0;
            rs=s.executeQuery("select datediff('"+checkoutdate+"','"+checkindate+"');");
            while(rs.next())
            {
                dayss=Integer.parseInt(rs.getString(1));
            }
            if(rr!=-1 && gg!=-1 && (rr*4)>=gg && dayss<=30 && dayss>0)
            {
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
                Date date = new Date();  
                String currentDate=formatter.format(date);
                rs=s.executeQuery("select datediff('"+checkindate+"','"+currentDate+"');");
                int av=0;
                while(rs.next())
                {
                    temp=rs.getInt(1);
                }
                if(temp>=0)
                {
                    rs=s.executeQuery("select datediff('"+checkoutdate+"','"+checkindate+"');");
                    while(rs.next())
                    {
                        days=rs.getInt(1);
                    }
                    rs=s.executeQuery("select code from "+viewbooking.locate+" where hname='"+viewbooking.hotel+"';");
                    while(rs.next())
                    {
                        code=rs.getString(1);
                    }
                    rs=s.executeQuery("select price from "+viewbooking.locate+" where hname='"+viewbooking.hotel+"';");
                    while(rs.next())
                    {
                        ppn=rs.getInt(1);
                    }
                    System.out.println(dayss);
                    System.out.println(days);
                    int checker[] = new int[dayss];
                    for(int i=0;i<dayss;i++)
                    {
                        checker[i]=10;
                    }
                    System.out.println("0");
                    rs=s.executeQuery("select * from "+code+" where status!=-1;");
                    String ccin=checkindate;
                    String ccout=checkoutdate;
                    int indiff=0,outdiff=0;
                    while(rs.next())
                    {
                        String cind=rs.getString(2);
                        String coutd=rs.getString(3);
                        int bx=0;
                        int room=rs.getInt(5);
                        rs1=s1.executeQuery("select datediff('"+ccout+"','"+cind+"');");
                        while(rs1.next())
                        {
                            bx=rs1.getInt(1);
                        }
                        rs1=s1.executeQuery("select datediff('"+ccin+"','"+cind+"');");
                        while(rs1.next())
                        {
                            indiff=rs1.getInt(1);
                        }
                        rs1=s1.executeQuery("select datediff('"+ccout+"','"+coutd+"');");
                        while(rs1.next())
                        {
                            outdiff=rs1.getInt(1);
                        }
                        System.out.println("122");
                        if(indiff>=0 && outdiff<=0)
                        {
                            for(int i=0;i<dayss;i++)
                            {
                                checker[i]-=room;
                            }
                            System.out.println("1");
                        }
                        else if(indiff>=0 && outdiff>0)
                        {
                            int temp1=0;
                            System.out.println("in temp");
                            System.out.println(coutd+" "+ccin);
                            rs1=s1.executeQuery("select datediff('"+coutd+"','"+ccin+"');");
                            while(rs1.next())
                            {
                               temp1=rs1.getInt(1);
                            }
                            System.out.println(""+temp1+" "+dayss);
                            for(int i=0;i<temp1;i++)
                            {
                                checker[i]-=room;
                            }
                            System.out.println("2");
                        }
                        else if(indiff<0 && outdiff<=0 && bx>0)
                        {
                            for(int i=-indiff;i<dayss;i++)
                            {
                                checker[i]-=room;
                            }
                            System.out.println("3");
                        }
                        else if(indiff<0 && outdiff>0)
                        {
                            for(int i=-indiff;i<(dayss-outdiff);i++)
                            {
                                checker[i]-=room;
                            }
                            System.out.println("4");
                        }
                    }
                    av=1;
                    for(int i=0;i<dayss;i++)
                    {
                        if(checker[i]<rr)
                        {
                            av=0;
                            break;
                        }
                    }
                    if(av==1)
                    {
                        String uid=null;
                        rs=s.executeQuery("select * from logindata where active=1;");
                        while(rs.next())
                        {
                            uid=rs.getString(1);
                        }
                       
                        
                        System.out.println("x");
                        s.execute("delete from "+uid+" where location='"+viewbooking.locate+"' and hname='"+viewbooking.hotel+"' and cin='"+viewbooking.checkin+"' and cout='"+viewbooking.checkout+"' and rooms="+viewbooking.rr+" and status=1 and bid='"+viewbooking.bid+"';");
                        System.out.println("y");
                        s.execute("delete from "+code+" where uid='"+uid+"' and cin='"+viewbooking.checkin+"' and cout='"+viewbooking.checkout+"' and rooms="+viewbooking.rr+" and status=1 and bid='"+viewbooking.bid+"';");
                        System.out.println("z");
                        s.execute("insert into "+uid+" values('"+viewbooking.locate+"','"+viewbooking.hotel+"','"+checkindate+"','"+checkoutdate+"',"+dayss+","+rr+","+ppn*rr+",1,'"+viewbooking.bid+"');");
                        System.out.println("zz");
                        System.out.println("insert into "+code+" values('"+uid+"','"+checkindate+"','"+checkoutdate+"',"+dayss+","+rr+",1");
                        s.execute("insert into "+code+" values('"+uid+"','"+checkindate+"','"+checkoutdate+"',"+dayss+","+rr+",1,'"+viewbooking.bid+"');");
                        int differ=viewbooking.price-(ppn*rr);
                        if(differ>0)
                        {
                            JOptionPane.showMessageDialog(this,"Modification successfull. "+differ+" will be credited to your account.");
                        }
                        else if(differ<0)
                        {
                            JOptionPane.showMessageDialog(this,"Modification successfull. You need to pay "+differ+" .");
                        }
                        //update waiting list
                        rs=s.executeQuery("select * from "+code+" where status=-1;");
            System.out.println("3");
            while(rs.next())
            {
                String a=rs.getString(2);
                String up=rs.getString(1);
                System.out.println(up);
                String b=rs.getString(3);
                String cbid=rs.getString(7);
                int rr=rs.getInt(5);
                int days1=rs.getInt(4);
                int checker1[]=new int[days1];
                int f=1;
                for(int i=0;i<days1;i++)
                {
                    checker1[i]=10;
                }
                rs1=s1.executeQuery("select * from "+code+" where status!=-1;");
                System.out.println("4");
                while(rs1.next())
                {
                    String x=rs1.getString(2);
                    String y=rs1.getString(3);
                    int room=rs1.getInt(5);
                    int ax=0,by=0,bx=0,ya=0;
                    rs2=s2.executeQuery("select datediff('"+a+"','"+x+"');");
                    while(rs2.next())
                    {
                        ax=rs2.getInt(1);
                    }
                    rs2=s2.executeQuery("select datediff('"+b+"','"+y+"');");
                    while(rs2.next())
                    {
                        by=rs2.getInt(1);
                    }
                    rs2=s2.executeQuery("select datediff('"+b+"','"+x+"');");
                    while(rs2.next())
                    {
                        bx=rs2.getInt(1);
                    }
                    rs2=s2.executeQuery("select datediff('"+y+"','"+a+"');");
                    while(rs2.next())
                    {
                        ya=rs2.getInt(1);
                    }
                    if(ax>=0 && by<=0)
                    {
                        for(int i=0;i<days1;i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                    else if(ax>=0 && by>0)
                    {
                        
                        for(int i=0;i<ya;i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                    else if(ax<0 && by<=0 && bx>0)
                    {
                        for(int i=-ax;i<days1;i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                    else if(ax<0 && by>0)
                    {
                        for(int i=-ax;i<(days1-by);i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                }
                for(int i=0;i<days1;i++)
                {
                    if(checker1[i]<rr)
                    {
                        f=0;
                    }
                }
                System.out.println("Checked f="+f);
                if(f==1)
                {
                    System.out.println("update "+up+" set status=0 where cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                    System.out.println("update "+code+" set status=0 where uid='"+up+"' and cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                    s1.execute("update "+up+" set status=0 where cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                    s1.execute("update "+code+" set status=0 where uid='"+up+"' and cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                }
            }
                        
                        menupage q=new menupage();
                        this.setVisible(false);
                        q.setVisible(true);
                    }
                    else
                    {
                        join.setVisible(true);
                        cancel.setVisible(true);
                        confirm.setVisible(false);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"You cant book hotel in the PAST !");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Read the note carefully!");
            }
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_confirmActionPerformed

    private void inmonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inmonthItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_inmonthItemStateChanged

    private void outmonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_outmonthItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_outmonthItemStateChanged

    private void inmonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inmonthActionPerformed
        // TODO add your handling code here:
        int gmm=Integer.parseInt((String)inmonth.getSelectedItem());
        int gyy=Integer.parseInt((String)inyear.getSelectedItem());
        if(gmm==1 || gmm==3 || gmm==5 || gmm==7 || gmm==8 || gmm==10 || gmm==12)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            inday.setModel(model);
        }
        else if(gmm==4 || gmm==6 || gmm==9 || gmm==11)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            inday.setModel(model);
            
            //dd.setMaximumRowCount(30);
        }
        else if(gmm==2 && gyy%4==0)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            inday.setModel(model);
            
            //dd.setMaximumRowCount(29);
        }
        else if(gmm==2 && gyy%4!=0)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            inday.setModel(model);
            
            //dd.setMaximumRowCount(28);
        }
    }//GEN-LAST:event_inmonthActionPerformed

    private void outmonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outmonthActionPerformed
        // TODO add your handling code here:
        int gmm=Integer.parseInt((String)outmonth.getSelectedItem());
        int gyy=Integer.parseInt((String)outyear.getSelectedItem());
        if(gmm==1 || gmm==3 || gmm==5 || gmm==7 || gmm==8 || gmm==10 || gmm==12)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            outday.setModel(model);
        }
        else if(gmm==4 || gmm==6 || gmm==9 || gmm==11)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            outday.setModel(model);
            
            //dd.setMaximumRowCount(30);
        }
        else if(gmm==2 && gyy%4==0)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            outday.setModel(model);
            
            //dd.setMaximumRowCount(29);
        }
        else if(gmm==2 && gyy%4!=0)
        {
            String labels[] = { "01", "02", "03", "04", "05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28" };
            final DefaultComboBoxModel model = new DefaultComboBoxModel(labels);
            outday.setModel(model);
            
            //dd.setMaximumRowCount(28);
        }
    }//GEN-LAST:event_outmonthActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
                           viewbooking q=new viewbooking();
                        this.setVisible(false);
                        q.setVisible(true);
    }//GEN-LAST:event_backActionPerformed

    private void joinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinActionPerformed
        // TODO add your handling code here:
        try
        {
             String uid=null;
             Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s=con.createStatement();
            ResultSet rs=null;
            Connection con1=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s1=con1.createStatement();
            Connection con2=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s2=con2.createStatement();
            Connection con3=DriverManager.getConnection("jdbc:mysql://localhost:3306/oop?zeroDateTimeBehavior=convertToNull","root","12345");
            Statement s3=con3.createStatement();
            ResultSet rs1=null,rs2=null,rs3=null;
             rs=s.executeQuery("select * from logindata where active=1;");
             while(rs.next())
             {
                uid=rs.getString(1);
             }
             System.out.println("Booking id : "+viewbooking.bid);
             System.out.println("0");
             s.execute("delete from "+uid+" where location='"+viewbooking.locate+"' and hname='"+viewbooking.hotel+"' and cin='"+viewbooking.checkin+"' and cout='"+viewbooking.checkout+"' and rooms="+viewbooking.rr+" and status=1 and bid='"+viewbooking.bid+"';");
             System.out.println("1");
             s.execute("delete from "+code+" where uid='"+uid+"' and cin='"+viewbooking.checkin+"' and cout='"+viewbooking.checkout+"' and rooms="+viewbooking.rr+" and status=1 and bid='"+viewbooking.bid+"';");
             System.out.println("2");
             s.execute("insert into "+uid+" values('"+viewbooking.locate+"','"+viewbooking.hotel+"','"+checkindate+"','"+checkoutdate+"',"+dayss+","+rr+","+ppn*rr+",-1,'"+viewbooking.bid+"');");
             System.out.println("3");
             s.execute("insert into "+code+" values('"+uid+"','"+checkindate+"','"+checkoutdate+"',"+dayss+","+rr+",-1,'"+viewbooking.bid+"');");
             System.out.println("4");
             JOptionPane.showMessageDialog(this,"Rooms not available for specified date ! Waiting list joined. Check there for further notifications. "+viewbooking.price+" will be credited to your account.");
             
             rs=s.executeQuery("select * from "+code+" where status=-1;");
            System.out.println("3");
            while(rs.next())
            {
                String a=rs.getString(2);
                String up=rs.getString(1);
                System.out.println(up);
                String b=rs.getString(3);
                String cbid=rs.getString(7);
                int rr=rs.getInt(5);
                int days1=rs.getInt(4);
                int checker1[]=new int[days1];
                int f=1;
                for(int i=0;i<days1;i++)
                {
                    checker1[i]=10;
                }
                rs1=s1.executeQuery("select * from "+code+" where status!=-1;");
                System.out.println("4");
                while(rs1.next())
                {
                    String x=rs1.getString(2);
                    String y=rs1.getString(3);
                    int room=rs1.getInt(5);
                    int ax=0,by=0,bx=0,ya=0;
                    rs2=s2.executeQuery("select datediff('"+a+"','"+x+"');");
                    while(rs2.next())
                    {
                        ax=rs2.getInt(1);
                    }
                    rs2=s2.executeQuery("select datediff('"+b+"','"+y+"');");
                    while(rs2.next())
                    {
                        by=rs2.getInt(1);
                    }
                    rs2=s2.executeQuery("select datediff('"+b+"','"+x+"');");
                    while(rs2.next())
                    {
                        bx=rs2.getInt(1);
                    }
                    rs2=s2.executeQuery("select datediff('"+y+"','"+a+"');");
                    while(rs2.next())
                    {
                        ya=rs2.getInt(1);
                    }
                    if(ax>=0 && by<=0)
                    {
                        for(int i=0;i<days1;i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                    else if(ax>=0 && by>0)
                    {
                        
                        for(int i=0;i<ya;i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                    else if(ax<0 && by<=0 && bx>0)
                    {
                        for(int i=-ax;i<days1;i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                    else if(ax<0 && by>0)
                    {
                        for(int i=-ax;i<(days1-by);i++)
                        {
                            checker1[i]-=room;
                        }
                    }
                }
                for(int i=0;i<days1;i++)
                {
                    if(checker1[i]<rr)
                    {
                        f=0;
                    }
                }
                System.out.println("Checked f="+f);
                if(f==1)
                {
                    System.out.println("update "+up+" set status=0 where cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                    System.out.println("update "+code+" set status=0 where uid='"+up+"' and cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                    s1.execute("update "+up+" set status=0 where cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                    s1.execute("update "+code+" set status=0 where uid='"+up+"' and cin='"+a+"' and cout='"+b+"' and rooms="+rr+" and status=-1 and bid='"+cbid+"';");
                }
            }
             
             menupage q=new menupage();
             this.setVisible(false);
             q.setVisible(true);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
                       
    }//GEN-LAST:event_joinActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new viewbooking().setVisible(true);
    }//GEN-LAST:event_cancelActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        login a =new login();
        this.setVisible(false);
        a.setVisible(true);
    }//GEN-LAST:event_logoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModifyBooking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel ccin;
    private javax.swing.JLabel ccout;
    private javax.swing.JLabel city;
    private javax.swing.JButton confirm;
    private javax.swing.JLabel crooms;
    private javax.swing.JLabel hname;
    private javax.swing.JComboBox<String> inday;
    private javax.swing.JComboBox<String> inmonth;
    private javax.swing.JComboBox<String> inyear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton join;
    private javax.swing.JButton logout;
    private javax.swing.JComboBox<String> nguests;
    private javax.swing.JComboBox<String> nrooms;
    private javax.swing.JComboBox<String> outday;
    private javax.swing.JComboBox<String> outmonth;
    private javax.swing.JComboBox<String> outyear;
    // End of variables declaration//GEN-END:variables
}
